#!/usr/bin/env python
"""Extend regular notebook server to be aware of multiuser things."""

# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

from jinja2 import ChoiceLoader, FunctionLoader
from notebook.notebookapp import NotebookApp

notebook_template = """
{% extends "templates/notebook.html" %}
{% block logo %}
{% endblock %}
{% block headercontainer %}
  {% block kernel_logo_widget %}
  {% endblock %}
{% endblock %}
{% block header %}
<div id="menubar-container" class="container" style="visibility: hidden;">
<div id="menubar">
    <div id="menus" class="navbar navbar-default" role="navigation">
        <div class="container-fluid">
            <button type="button" class="btn btn-default navbar-btn navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
              <i class="fa fa-bars"></i>
              <span class="navbar-text">{% trans %}Menu{% endtrans %}</span>
            </button>
            <p id="kernel_indicator" class="navbar-text indicator_area">
              <span class="kernel_indicator_name">{% trans %}Kernel{% endtrans %}</span>
              <i id="kernel_indicator_icon"></i>
            </p>
            <i id="readonly-indicator" class="navbar-text" title='{% trans %}This notebook is read-only{% endtrans %}'>
                <span class="fa-stack">
                    <i class="fa fa-save fa-stack-1x"></i>
                    <i class="fa fa-ban fa-stack-2x text-danger"></i>
                </span>
            </i>
            <i id="modal_indicator" class="navbar-text"></i>
            <span id="notification_area"></span>
           <div class="navbar-collapse collapse">
              <ul class="nav navbar-nav">
                <li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">{% trans %}Help{% endtrans %}</a>
                    <ul  id="help_menu" class="dropdown-menu">
                        {% block help %}
                        {% set
                            sections = (
                                (
                                    ("http://nbviewer.jupyter.org/github/ipython/ipython/blob/3.x/examples/Notebook/Index.ipynb", _("Notebook Help"), True),
                                    ("https://help.github.com/articles/markdown-basics/",_("Markdown"),True),
                                ),
                            )
                        %}

						{% set openmsg = _("Opens in a new window") %}
                        {% for helplinks in sections %}
                            {% for link in helplinks %}
                                <li><a rel="noreferrer" href="{{link[0]}}" target="{{'_blank' if link[2]}}" title="{{openmsg if link[2]}}">
                                {% if link[2] %}
                                    <i class="fa fa-external-link menu-icon pull-right"></i>
                                {% endif %}

                                {{link[1]}}
                                </a></li>
                            {% endfor %}
                            {% if not loop.last %}
                                <li class="divider"></li>
                            {% endif %}
                        {% endfor %}
                        <li class="divider"></li>
                        <li title="{% trans %}About Jupyter Notebook{% endtrans %}"><a id="notebook_about" href="#">{% trans %}About{% endtrans %}</a></li>
                        {% endblock %}
                    </ul>
                </li>
              </ul>
          </div>
        </div>
    </div>
</div>


{% endblock %}
"""


class KooplexUserNotebookApp(NotebookApp):

      def patch_templates(self):
        import os

        # let us point to some crasy urls with the buttons
        # this illustrates the values of some internal url type strings
        env = self.web_app.settings['jinja2_env']
        env.globals['report_name'] =  os.getenv("REPORT_NAME")
        env.globals['author_name'] = os.getenv("AUTHOR NAME")

        # patch jinja env loading to modify page template
        def get_page(name):
            if name == 'tree.html':
                return tree_template
            if name == 'notebook.html':
                return notebook_template
            if name == 'terminal.html':
                return terminal_template
            if name == 'edit.html':
                return edit_template
                
        orig_loader = env.loader
        env.loader = ChoiceLoader([
            FunctionLoader(get_page),
            orig_loader,
        ])

     
      def init_webapp(self):

          super(KooplexUserNotebookApp,self).init_webapp()
          self.patch_templates()

def main(argv=None):
    return KooplexUserNotebookApp.launch_instance(argv)


if __name__ == "__main__":
     main()
