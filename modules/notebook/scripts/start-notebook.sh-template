#!/bin/bash

# Change UID of NB_USER to NB_UID if it does not match 
if [ "$NB_UID" != $(id -u $NB_USER) ] ; then
    usermod -u $NB_UID $NB_USER
fi

# Enable sudo if requested
if [ ! -z "$GRANT_SUDO" ]; then
    echo "$NB_USER ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/notebook
fi

# debug
env

# remount volumes in the proper folderstructure
# mount home
mkdir /home/${NB_USER}
mount -o bind /mnt/.volumes/home/${NB_USER} /home/${NB_USER}
# mount git
mkdir -p /home/${NB_USER}/git
mount -o bind /mnt/.volumes/git/${NB_USER}/${PR_PWN} /home/${NB_USER}/git
# mount share
mkdir -p /home/${NB_USER}/share
mount -o bind /mnt/.volumes/share/${PR_PWN} /home/${NB_USER}/share
# mount owncloud
mkdir -p /home/${NB_USER}/oc
echo "http://##PREFIX##-nginx/ownCloud/remote.php/webdav/ /home/${NB_USER}/oc davfs user,rw,auto 0 0" > /etc/fstab
addgroup ${NB_USER} davfs2
su ${NB_USER} -c "mount /home/${NB_USER}/oc"
# hide volumes from the user
mkdir /tmp/.empty
mount -o bind /tmp/.empty /mnt/.volumes

ssh-keyscan -H ##PREFIX##-gitlab > /tmp/gitlab.pub
USER_HOSTKEYS=/home/${NB_USER}/.ssh/known_hosts
cat /tmp/gitlab.pub $USER_HOSTKEYS | sort | uniq > /tmp/new
mv /tmp/new $USER_HOSTKEYS
#FIXME: gid hardcoded
chown ${NB_USER}:9998 $USER_HOSTKEYS

# clone git repository if it has not yet been cloned
su $NB_USER -c "eval \"\$(ssh-agent -a $SSH_AUTH_SOCK)\" && ssh-add \$HOME/.ssh/gitlab.key"

if [ -x /home/${NB_USER}/git/clone.sh ] ; then
    su $NB_USER -c "/home/${NB_USER}/git/clone.sh"
fi

# source /etc/bash.bashrc
# source bash initialisation fragments from volumes attached to the container
#if [ -d /vol ] ; then
#    for rc in /vol/*/bashrc ; do
#        . $rc
#    done
#fi

# manage symbolic links under user's conda env directory
CONDA_ENVS=/home/$NB_USER/.conda/envs
if [ ! -d $CONDA_ENVS ] ; then 
  echo "recreating $CONDA_ENVS"
  mkdir -p $CONDA_ENVS
  #FIXME: gid hardcoded
  chown $NB_USER:9998 /home/$NB_USER/.conda
fi
#FIXME: gid hardcoded, left here to lazy set formerly screwed permissions
chown $NB_USER:9998 /home/$NB_USER/.conda
for d in /vol/*/condaenvs/*/ ; do
  volname=$(echo $d | cut -f3 -d\/)
  LINK=$CONDA_ENVS/$volname
  if [ ! -e $LINK ] ; then
      echo "creating symlink $LINK"
      ln -s $d $LINK
  elif [ -h $LINK ] ; then
      if [ $(realpath $LINK) != $(echo $d | sed s/'\/$'//) ] ; then
          echo "link $LINK exists and points to somewhere else, randomize the name"
          ln -s $d ${LINK}.$(mktemp -u | sed s/[^\.]*\.//)
      fi
  else
      echo "file or dir $LINK exists, randomize the name"
      ln -s $d ${LINK}.$(mktemp -u | sed s/[^\.]*\.//)
  fi
done

# Start the notebook server
exec su $NB_USER -c "cd ; env PATH=$PATH jupyter notebook $* --NotebookApp.iopub_data_rate_limit=1.0e10 --EnvironmentKernelSpecManager.display_name_template=\" {}\" "

# clean up
umount /mnt/.volumes
umount /home/${NB_USER}/oc
umount /home/${NB_USER}/git
umount /home/${NB_USER}/share
umount /home/${NB_USER}
