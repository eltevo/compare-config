#!/bin/bash

##source /etc/bash.bashrc
# source bash initialisation fragments from volumes attached to the container
##if [ -d /vol ] ; then
##    for rc in /vol/*/bashrc ; do
##        . $rc
##    done
##fi


mkdir -p /home/$NB_USER
mount -o bind $REPORT_DIR/home/$NB_USER /home/$NB_USER  

REPORTHOME=/mnt/.volumes/report
mkdir -p $REPORTHOME
mkdir $REPORTHOME/.jupyter
mkdir $REPORTHOME/.jupyter/custom

cat << EOF > $REPORTHOME/.jupyter/custom/custom.js

require(['base/js/namespace', 'base/js/events'], function (IPython, events) {
  events.on("notebook_loaded.Notebook", function () {
    IPython.notebook.minimum_autosave_interval = 0; // disable autosave

  });
});

EOF

# manage symbolic links under user's conda env directory
CONDA_ENVS=$REPORTHOME/.conda/envs
mkdir -p $REPORTHOME/.conda
mkdir -p $CONDA_ENVS; 
chown -R reportreader:9998 $REPORTHOME/.conda
#mount -o bind/vol/$KERNEL/condaenvs/$KERNEL/

for d in /vol/*/condaenvs/*/ ; do
  volname=$(echo $d | cut -f3 -d\/)
  LINK=$CONDA_ENVS/$volname
  echo "creating symlink $LINK"
  ln -s $d $LINK
done


# Start the notebook server 
exec su reportreader -c "/opt/conda/bin/jupyter trust /home/$NB_USER/$REPORT_FILE; /opt/conda/bin/jupyter nbextension enable init_cell/main; cd /home/$NB_USER; env PATH=$PATH jupyter report-kooplex  $* --NotebookApp.iopub_data_rate_limit=1.0e10 --EnvironmentKernelSpecManager.display_name_template=\" {}\""

